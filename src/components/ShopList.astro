---
import fetchApi from "../lib/strapi";
import type Coffeeshop from "../interfaces/coffeeshop";
import type { RegularOpeningHours, DayHours } from "../interfaces/coffeeshop";
import ShopCard from "./ShopCard.astro";

const coffeeshops = await fetchApi<Coffeeshop[]>({
  endpoint: "coffeeshops",
  wrappedByKey: "data",
  query: {
    populate: "*",
  },
});

// Check the coffeeshop data structure
console.log("Full coffeeshop data:", coffeeshops[0]);

// Get unique towns for the filter
const towns = [
  "All",
  ...new Set(coffeeshops.map((shop) => shop.attributes.town)),
];

// Get the initial selected town from URL parameters
const initialSelectedTown = Astro.url.searchParams.get("town") || "All";
---

<div>
  <h1 class="text-2xl mb-8">Coffeeshop Results:</h1>
  <div class="flex flex-wrap gap-12 justify-center">
    {
      coffeeshops.map((shop) => (
        <ShopCard coffeeshop={shop} buttonText="Discover More" />
      ))
    }
  </div>
</div>

<script define:vars={{ coffeeshops, initialSelectedTown }}>
  function filterShopsByTown(selectedTown) {
    console.log("filtering shops for town: ", selectedTown);
    const shopCards = document.querySelectorAll(".shop-card");
    shopCards.forEach((card) => {
      const cardTown = card.getAttribute("data-town");
      if (selectedTown === "All" || cardTown === selectedTown) {
        card.style.display = "block";
      } else {
        card.style.display = "none";
      }
    });
  }

  function updateUrl(selectedTown) {
    console.log("Updating URL for town: ", selectedTown);
    const url = new URL(window.location.href);
    url.searchParams.set("town", selectedTown);
    console.log("New URL:", url.href);
    window.history.pushState({ path: url.href }, "", url.href);
  }

  // Initial filter on load
  filterShopsByTown(initialSelectedTown);

  // Listen for custom event from LocationsDropdown
  document.addEventListener("townSelected", (event) => {
    console.log("Town selected event received:", event);
    console.log("Event detail:", event.detail);

    // Extract the town name from the object
    const selectedTown = event.detail.town;

    console.log("selectedTown: ", selectedTown);
    filterShopsByTown(selectedTown);
    updateUrl(selectedTown);
  });

  // Listen for popstate event (back/forward button)
  window.addEventListener("popstate", () => {
    const selectedTown =
      new URL(window.location.href).searchParams.get("town") || "All";
    filterShopsByTown(selectedTown);
  });
</script>
